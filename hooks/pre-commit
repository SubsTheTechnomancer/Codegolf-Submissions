#!/usr/bin/env python

import os
from git import Repo
import matplotlib.pyplot as plt
import urllib
from urllib.request import urlopen
import re
from dotenv import load_dotenv
import csv

inittext='''
# Codegolf-Submissions 
[![Deploy static content to Pages](https://github.com/SubsTheTechnomancer/Codegolf-Submissions/actions/workflows/static.yml/badge.svg?branch=docs)](https://github.com/SubsTheTechnomancer/Codegolf-Submissions/actions/workflows/static.yml)<br>
All submissions I have made to [Code Golf](https://code.golf/) in various languages. Note that I do not use encoding tricks in my submissions so my ranking is only concerned with bytes (which will be identical to chars).
# Currently In Progress:
'''

tableheader='''
| Language | Bytes | Rank (in bytes)
|:---:|:---:|:---:|
'''

usagenotes='''
# Installation notes
You can use this repository for your own code.golf exploits as well!<br>
Clone/Fork this repository into your local system. Use requirements.txt to check for any changes for this file.<br>
Use the command `git config core.hooksPath hooks` to assign `hooks\pre-commit` as a hook of this repository (otherwise this README will break!)<br>
At this point, you can replace all the various hole folders with your own submissions. The format in which they must be stored is `<Hole name>/<Language name>/<whatever file>`.
This will ensure the README updates accurately.<br>
It is important to replace my git username in `config.env` with your own github username so it can pull your hole ranks.<br>
Don't commit too fast or too many times at once since the hooks web scrap for rank (which might ratelimit your IP).<br>
'''

contribution='''
# Contribution
If you wish to contribute, please first create an relevant issue. If a PR is required, it will be informed to you.<br>
Ensure you mark all your local hole changes as untracked in your branch/fork in case you are to make a PR, so that there is no merge conflicts, and that `config.env` is similarly
untracked.
'''

load_dotenv('config.env')
username=os.getenv('GIT_USERNAME')

def drawGraph(tdata,t):
    #Draw bar graph with specific color codes
    plt.style.use('dark_background')

    plt.bar(tdata.keys(),tdata.values())
    plt.xlabel('Lang')
    plt.ylabel('Char count')
    plt.xticks(rotation=45)
    plt.tight_layout()

    plt.savefig(f"charts/{t.replace(' ','_',-1)}.png",bbox_inches='tight',transparent=True)        #Save as a recognizable name for embedding
    plt.close()

def getRank(test,lang):
    pg=1
    rank=[]

    #Replace whitespace and capitals and additional characters in test name
    test = re.sub(r' ','-',test.lower())
    test = re.sub(r'(|)','',test)

    #Replace special chars in lang name
    lang = re.sub(r'\+','p',lang.lower())
    lang = re.sub(r'\#','-sharp',lang)
    lang = re.sub(r'><>','fish',lang)

    #Loop through all rank pages
    while(pg<11):
        try:
            page = urlopen(f'https://code.golf/rankings/holes/{test}/{lang}/bytes?page={pg}')
        except urllib.error.HTTPError:
            break

        html = page.read().decode('utf-8')

        rank=re.findall(fr'<td>([0-9]+)<sup>.*</sup>\n +<td>\n +<a href=\"/golfers/{username}',html)

        if(len(rank)==1):
            break

        pg+=1

    if(rank==[]):
        return 'NA'
    else:
        return rank[0]

tests=[test for test in os.listdir('.') if os.path.isdir(test)]
tests.remove('.git')
tests.remove('hooks')
tests.remove('charts')
tests.remove('docs')
tests.remove('.github')
if('.elixir_ls' in tests):
    tests.remove('.elixir_ls')

readme = open('README.md','w')
readme.write(inittext)

alldata=[]                                                              #List of dictionaries storing all codegolf data
fields=['Hole','Bytes','Rank']

for t in tests:
    tdata={}                                                            #Dictionary to store language bytes
    trank={}                                                            #Dictionary to store language ranks
    readme.write('## '+t)
    readme.write(tableheader)
    for lang in os.listdir(t):
        b=''
        files=os.listdir(t+'/'+lang)
        
        if len(files)==1:
            f=open(t+'/'+lang+'/'+files[0],'r')
            b=len(f.read())                                             #Get number of chars in each language
            f.close()
        
        rank=getRank(t,lang)
        readme.write('|'+lang+'|'+str(b)+'|'+rank+'|\n')                #Add it to the markdown table
        tdata[lang]=b                                                   #..And to the dictionaries
        trank[lang]=rank                                     

    readme.write('\n\n')
    drawGraph(tdata,t)                                                  #Draw the bar graph with matplotlib
    readme.write(f"![{t}](charts/{t.replace(' ','_',-1)}.png)\n\n")
    alldata.append({'Hole':t,'Bytes':tdata,'Rank':trank})               #Append hole data to main list

with open('golfdata.csv','w',newline='') as datafile:                   #TODO: Windows behaviour requires newline='', but this might cause Linux builds to break the csv
    writer = csv.DictWriter(datafile,fieldnames=fields)
    writer.writeheader()
    writer.writerows(alldata)

readme.write(usagenotes)
readme.write(contribution)
readme.close()

#Add the readme changes to the current commit because Git is drunk as hell and doesn't auto-add during hooks
repo = Repo('.').git
repo.add(all=True)
